What we desire to do in this phase is translate a core expression into the block language. We do this via a process of 'block extraction'. The purpose of this process is to make it easy to generate independent, labeled blocks of bytecode instructions later on. This process must be able to handle closure conversion and the nesting of scope, which complicates things greatly and requires care.

For the sake of some efficiency, we wish to avoid generating closures where possible. Ideally, most top-level functions will not be closures, and the fact that value variables cannot be defined outside of a top-level function (in the main Boba language) ensures that this could be the case.

For example:

`let swap a b = b a ;`

contains no free value variables, nor any free variables at all. Thus, it's definition need not result in closure conversion, and it can be treated with a simple `call $label` instruction in the bytecode.

But also:

`let foo z = swap z ;`

contains a free variable that references a *non-closure* function. The qualifier is important: not only can we `call $swap` instead of using `find f i + call-closure` in the body of the function, we know that foo doesn't need to capture the closure referred to by `swap` because there is no such closure. Hence, foo itself does not need to be a closure, despite having a free variable.

The plan:
- It is critical to perform a renaming step, so that all names in the program are defined exactly once. The odd case here is 'resume', which is never explicitly defined and can refer to multiple different continuations, so some scope handling is still necessary. Still, the renaming step ensures that all generated blocks will have a unique name that can be referenced from any other expression, eliminating some of the complexities introduced by shadowing and lexical scope.
- We then begin extracting blocks from the top down. The first expression has no free variables, and so it can be a non-closure block; this is our `main`.
- Within that expression, we may have `let` or `let-rec` words. Most likely, these are not enclosed within an `assign` scope, so they will be extracted as non-closure blocks as well.
- And so on with each level, until we encounter a `let` or `let-rec` enclosed within an `assign` scope. This time we extract it, noting which variables refer to values and closures, and which refer to non-closure functions. Only variables in the former two categories get counted as the 'free' variables for that closure, and will be listed explicitly in the block definition.
- Within the scope of the `let` or `let-rec` that is a closure, every sub-`let` or sub-`let-rec` that references the parent by name will also be forced to be a closure, even if it does not reference the enclosing assign value variables.
- Handler and return blocks will be closures under similar conditions. Note that `handle x ... { }` can be parameterized by value variables `x ...`, which can appear in the handler and return blocks. These value variables do not require closure conversion if they appear in the handlers, as they get injected into the stack frames by the handle operations at runtime (since they must be threaded through the lifetime of the handler and so are not `bound` but rather closer to `ambient`). Similar for `resume`, which will always be injected into an operation stack frame called from `operation`.

